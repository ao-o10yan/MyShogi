
ToDo : 次に何とかするやつ
- UIスレッドとGameControllerとのメッセージングの仕組み



■　2018/06/04


- エンジンダイアログの作業開始
	- パッケージ用の画面写真のためにとりま、何か作らねばならない。
		// 段位選択
		将棋神
		九段
		八段
		七段
		六段
		五段
		四段
		三段
		二段
		初段
	- ImageLoader.CreateAndCopy()追加。
	- GameSettingDialog追加。
	- とりま、なんか出来た。

- 棋譜ウィンドウ、最小化しているときにフォントサイズがマイナスになって落ちるの修正。


- 移動できない升を示すエフェクト、重すぎ。
	- 移動できる升のみ光らせるぐらいのほうが良いのでは…。
	- 光らせる設定もメニューに追加した。
	- 升の塗りつぶしエフェクト、ダサすぎなのでデザインお願いしたほうが良いのでは…。
	

- 成り・不成のダイアログに描画されている駒のセンタリング
	- SpriteManagerのほう修正した。
- 棋譜ウィンドウの表示、消費時刻のインデント狂っていたの修正。
	- BorderStyleがFixed3Dになっていたの修正。
	- 棋譜ウィンドウの先頭に開始局面と入れた。
	- 棋譜ウィンドウのpadding修正。
	- 棋譜ウインドウ、スクロールバーを出したときにそれを計算に入れて文字を縮小する。


- 棋譜ウィンドウをListBoxに変更。
- 棋譜ウインドウの文字描画、WebBrowserを用いると環境ごとの差異をゼロに出来ない。
	また思っているフォントサイズにならない。ブラウザの文字のレンダリング、いい加減すぎ。
	これはもっとノウハウがないと無理ぽ。
	- とても残念だが、仕方ないので、棋譜ウインドウを.NET FrameworkのListBoxに変更する。


- Mizarさんの作業分をマージ(#7 , #8)


- KifuManager
	- KifuManagerのCSA形式の読み込みのサポート
	- KifuManagerのKIF形式のサポート
	- KifuManagerのKI2形式のサポート
		- Mizarさんに依頼中


- Kif.csのKIFがsingletonになっていなかったの修正。
- CSA.csのコメントがkifになっていたの修正。


- 棋譜ウインドウへの出力
	- とりま棋譜が表示されるようになった。
	- 文字サイズが環境によって異なる＆リサイズがうまく出来てない。


- Mizarさんの作業分をマージ(#6)


- 先手の成り駒の位置、微調整。
	- ImageConverter修正。


- 成り・不成のダイアログのhoverの処理追加
	- SpriteManager.PromoteDialog、定数を外に出した。
	- SpriteManager.IsHoverPromoteDialog()追加した。
	- 成り・不成のダイアログの選択ハンドラを書いた。
		- 駒が動かせるようになった。
	- 成り・不成の行き先の升、最終手の升のエフェクトが優先されているの修正。
	- Position.IsLegal()で打ちと成りの共存する指し手がlegalに判定されていたの修正。
	(普通、指し手生成ではこの指し手を生成しないので関係ないが、成り・不成のダイアログの処理で困る)


- 成り・不成のダイアログ追加。
	- "promote_dialog.png"
		- width = (103+102)*2 = 410 , height = 124+39 = 163
	- ImageManagerにPromoteDialogImage追加。
	- SpriteManagerにPromoteDialog()追加。
	- SpriteにdstOffset追加
	- GameScreenDrawのほうのDrawSpriteにdstOffsetの計算追加
	- とりま、ダイアログ自体は描画されるようになった。
	- どれがクリックされたのか判定難しい。
		- ダイアログをSpriteで描画しているので転送元スプライトを求めるためにはマウス座標から逆変換がまた必要になって…。


■　2018/06/03


- 駒をデバッグ用に実際に移動させる処理を書く
	- Util.MakeMove(SquareHand,SquareHand , bool promote)追加
	- とりま、駒がユーザー操作で移動できるようになった。


- ドラッグによる駒の移動実装


- Position.PieceOn(SquareHand)追加。
	- これがないと駒打ちと駒移動を同一の枠組みで処理できない。
- SquareHand.IsDrop()追加
- 掴んでいる自駒を再度クリックしたとき、掴んでいたのをキャンセルする動作にする。
- GameScreen.move_piece()用意。ユーザーが駒の移動を示したときにうまくこのハンドラが呼び出されるところまで確認。


- MainDialog.ScreenRedraw()でnull判定追加。
	- MainDialogのコンストラクタのInitializeComponent()の最中にresizeイベントが
		発生しうることをうっかりしていた。


- Position: 10枚以上の持駒を受け入れる (#5 Mizarさんより)


- 手駒を打つときの重ね合わせ表示がおかしかったの修正。
	- picked_up_spriteの処理、統合。
	- 駒台の手駒を掴んだ時に掴んだ升のエフェクト処理を追加。

- 王手を回避していない警告ダイアログ
	- これ、使うのやめる。自殺手とダイアログを分けるの結構難しい気がする。
		すでに合法手のみになっているので、余計なことしないでおこう…。


- 駒台の駒を打つ為に掴む処理
	- 駒台の駒をつかめるようになった。
	- 手番側の駒しかつかめないようにした。


- 升のエフェクトのenumを用意
- GlobalConfig.PickedMoveToColorType追加
- MainDialogのメニューに駒を掴んだときの移動先の升のエフェクトを変更できるようにした。
	- 移動できない升を暗くする
	- 盤上の駒を掴むところまで出来た。


- マウスクリックに対して駒を持ち上げている感じになった。


- MainDialogからGameScreen分離
	- だいぶ綺麗に分離した。(分離できた)


- MainDialogViewState.cs追加。
	- ユーザーの操作に対して状態管理を行う必要があるので。
	- MainDialog.csもWin2D/MainDialog配下に移動
	- MainDialogViewState.cs追加
	- MainDialogViewInstanceにMainDialogViewState追加。


- MainDialogで複数対局画面を描画するときに必要なものを分離
- ObjectModel/Util.cs削除
- Model/Math作成。
	- AffineMatrix.cs追加。
	- Vector2D.cs追加
- System.Mathを参照していたところ修正。
- MainDialog.KifuControlをMainDialogのViewInstanceに移動。


■　2018/06/02


- MainDialogのコード整理
	- width,heightはSizeを使って書き換える。
	- Piece.Inverse()追加
- BoardReverse、やはりGlobalConfigにも用意する。Viewの個別設定は別途必要。
- SquareHandにToSquareHand()追加。


- 指し手の選択機能をMainDialogに追加する作業開始
	- MainDialogViewModelにCanMoveなど追加。
		- MainDialogのClickハンドラでこのpropertyを見に行くように
	- MainDialogにAffine()の逆変換であるInverseAffine()追加
	- MainDialogにマウスハンドラ追加
		- ドラッグ、クリックを自前で判定
	- Model.Shogi.CoreにSquareHand追加。
	- BoardReverseをMainDialogViewModelに移動


- aboutダイアログのhtmlで文字フォントを指定した。
	- これで、複数の環境でうまく表示できることを確認。
	

■　2018/06/01


- aboutダイアログのhtml、centeringなど。
	- もう少し調整が必要な模様…。


- readme.mdに最新の作業状況などを反映。


- aboutダイアログのhtml修正。
	- WebBrowserの問題、pxで指定していたのがいけなかったのか。(Mizarさん、サンクス)


- マーカー用に黒の成り駒を用意する。
	- ImageConverter修正。
	- 駒画像、heightを424から636に変更。
	- ImageManager修正。
	- SpriteManager修正。
	- GlobalConfigにPromotePieceColorType追加


- 縦長の駒台画像差し替え。
	- それに伴う手駒の描画座標修正


- 駒の移動方向が図示してある画像の処理
	- 連結スプライト用意するか…。
		- した。
	- "piece_atk_v1_776_424.png"
	- 成り駒とマーカーが混じると見にくい…対策考え中。


- 棋譜ウインドウのリサイズハンドラ追加
- MainDialogにaffine(Size)追加。


- 棋譜ウィンドウ、MainDialogに埋め込んだほうがいいかもな。よく考える。
	- 棋譜ウィンドウ、WindForm.Controlに変更
	- Control.DesignModeがうまく取れない。吐きそう…。
	- 解決した : https://stackoverflow.com/questions/4498478/designmode-in-subcontrols-is-not-set-correctly
	- とりま、棋譜ウィンドウをMainDialogに埋め込んでおいた。あとでもうちょっとなんとかする。
- MainDialogからaffine変換する部分をMainDialogDraw.csに移動
- MainDialogにaffine(Point)追加。


- html/をgitの管理下に移動。


- 棋譜ウィンドウの実装開始
	- WebBrowserを抽象化したクラスを用意するか？
	- navigateとInvokeしかないからしなくてもいいかな…。
	- とりあえずKifuDialog途中まで書けた。
	- このデザインよく考えたほうが良さそう。
- MainDialogのDrawString、dpiに非依存に変更する。
- htmlの配置場所、text/やめて、html/に変更する。


- dpi awareに変更する
	- cf . Windows Formsアプリケーションの高DPI対応  https://qiita.com/felis_silv/items/efee4b1a397b0b95100a
	- AboutDialogも修正。うまく動いたのでこれで良し。
- 良く考えた末に、Window.Controlのなかで使うWebBrowser、dpi awareになられると困るという結論になった。
		- 外側のControlがdpi awareで、自動的に拡大されてて、それに応じた座標系を使って、窓を作ってそこに
		WebBrowserを配置しているのに、そのなかが勝手に違う座標系で描画されるのがおかしくなる原因。
		- WebBrowserのhigh dpi対応
			- https://social.msdn.microsoft.com/Forums/vstudio/en-US/cea332e5-071d-4db5-bee5-1c3342644e70/webbrowser-control-high-dpi-support?forum=winforms

- 縦長の駒台、もうちょっと上まで素材が必要。修正依頼。
- NotifyObject、値型の比較するところ、間違っていたの修正。
	- NotifyObject.Util.GenericEquals()追加。
- 駒台とネームプレートの素材を分離
	- ImageManager修正。
	- GlobalConfig.KomadaiImageVersion追加
- 駒の移動方向の素材発注
- WebBrowser、high dpi対応、ムズすぎワロタ


■　2018/05/31


- MainDialogで描画している画像、すべてSprite化する。
- ImageLoaderにSetNullBitmap()追加。
- MainDialogのDrawImage()廃止。描画手段はDrawSprite()とDrawString()だけに限定した。


- Spriteクラス追加。
- SpriteManager追加
- MainDialogをSpriteを用いて描画を抽象化
- ImageManagerのプロパティ名の～Img、ここだけ省略形なの気持ちわるいので～Imageに変更。


- MainDialogのコード、機能別にファイルを分離
	- View/Win2D/MainDialog/ 追加
		- MainDialogEventHandler.cs追加
		- MainDialogFitToScreen.cs追加
		- MainDialogMenu,cs追加


- readme.mdに特徴など追加


- 着手後の移動元の升のエフェクトを追加。(デフォルトでは、なし)
	- メニューで選択できるようにした。
	- GlobalConfigにLastMoveFromColorType追加。


- 升のエフェクト、駒の画像と分離する。
	- ImageLoaderにSetBitmap()追加
	- ImageManager内で生成するコード追加。
	- Graphics.DrawImage()で生成していたの間違いなのでSetPixel()使うように修正。
- 移動先の升のエフェクト、なしを選択できるようにする。


- "setting.xml"名前かぶりかねないので"MyShogi.setting.xml"に変更する


- 小さすぎるフォントの文字を描画しないように。
- MainDialogの横幅、一定以上に縮められないようにするコード追加。
	- 一定以上にも広げられないコード追加
	- →　あかん、これハングする。.NET FrameworkのClientSize、setterの処理おかしい気がする。


- MainDialogにToolStrip追加する。
	- とりあえず「転」ボタンだけハンドラ用意した。
- メニューに「対局」を追加する
	- 中身はまだ何も。
- 商用版、GlobalConfigにCommercialVersionのプロパティを用意することに変更。
	- 商用版の判定、間違っていたの修正。


■　2018/05/30


- メニューに「その他」を追加
	- aboutダイアログ追加
	- "YaneuraOuGUI2018.txt"の置き場をtext/に変更
	- "global_config.xml"のファイル名を"settings.xml"に変更


- ImageConverterの元画像のフォルダ変更する。


- 最終手の表示、色が変更できると良いのか…。
	- 誰得なんだ、この機能。
	- GlobalConfig.LastMoveColorType追加
	- これに伴いImageManager修正


- progress.md削除
	こんなん要らんやろ…。

	# 作業状況

	## Model/Shogi/Core

	- Bitboardをやねうら王から移植 →　完了
	- Bitboardで利きの実装　→　完了
	- GenMoveで全合法手の生成　→　完了
	- Positionクラスの実装、DoMove(),UndoMove() →　完了

	## Model/Shogi/Kifu

	- 棋譜の読み書き PSN,PSN2形式完了
		- CSA,KIF,KI2形式まだ
	- KifuManager、おおよそ完成

	## View

	- MainDialog →　対局盤面表示できるようになった(段・筋の数字と手駒はまだ)
		- メニュー色々、追加中。
		- 盤面反転　→　完了
		- 駒の画像選択　→　完了
		- 盤の画像選択　→　完了
		- 畳の画像選択　→　完了

	## App

	- GlobalConfig →　全体設定の読み込み、自動保存のコード書けた。


- readme.md、予定のところに局面の画像出力機能など追記。


- 最終手の移動先の升を朱色にする
	- ImageConverter修正。
	- Piece.WHITEのところの画像にその朱色のイメージを入れる
	- MainDialog、修正。


- 畳と盤面画像を分離する
	- ImageLoaderでRGBに読み込む機能不要なのでは…。削除する。
	- 代わりに、imageを合成する機能を用意する。
- ImageManager、Load修正。
	- エラー処理、削除。(ファイルが存在しないときは赤い「×」が設定されるので)
- GlobalConfigからScreenRatio削除
- GlobalConfigにTatamiImageVersion追加
- MainDialogのメニューに畳の選択追加など


- 成り駒は赤い駒に変更する
	- ImageConverter修正。


- 対局盤面、対局者氏名が描画されるように。
- 手駒の枚数画像、わかりにくかったので差し替え。
	- いい感じになった。
- board画像、対局者氏名のところ窓枠修正。
- MainDialogの定数をMainDialogConst.csに分離


- 画像の読み込みに失敗したときに、赤で「×」の画像を生成して、それを表示することにする。


- 盤面の描画位置、メニュー高さ分だけずれていたの修正。


- フルスクリーン時の処理、専用で何か追加したほうが良いのでは…。
	- フルスクリーン時にwindow captionを消す処理を追加
	- 簡単ではなさげなのでやめる。
- 駒の枚数の数字、縮小されたときに見にくいので修正依頼。


- ウィンドウのリサイズが出来るように変更する。
	- affine変換の係数おかしかったので修正した。


■　2018/05/29


- 背景、alpha channelありのbitmapに読み込むの無駄なのでalphaなしのBitmapにcloneするようにした。


- Mizarさんのプルリクをmerge (#4)
	* KI2: 盤上で着手可能な駒が無ければ駒打ちと解釈する
	* CSA: "P+00AL", "P-00AL" の実装
	* KifuManager: wip
	* EastAsianWidth


- ImageConverter、成り駒の位置調整、忘れていたの修正。


- 手駒の右肩に表示する駒の枚数を示す数字画像追加
	- 読み込みに対応
- MainDialogの駒台の駒の描画
	- 反転表示に対応
	- 駒が2枚以上のときは右肩に数字表示をするように
- MainDialogの駒台の画像を大きめに変更


- Menuに盤の数字を描画する/しないを追加した。
- ImageConverterにConvertBoardNumberImage()追加。
- GlobalConfigにBoardNumberImageVersion追加。
- GlobalConfigにBoardReverse追加。
	- 関連するハンドラ追加
	- MainDialogに反映するように。
- メニューの表示のところに「盤面反転」追加。
- MainDialogの盤上の駒に盤面反転が反映するようにした。


■  2018/05/28


- MainDialogの描画のところ、抽象化した。


- 駒素材、ずれ修正。
	- ImageConverter、すべての駒素材を一括変換するように修正。
	- 駒素材のNO_PIECEのところにα30%の黒入れる。(明度を落とすのに使えるかも。あるいは位置の確認に使えるかも)
	- 読み込む駒画像の横幅776pxに変更


- Menuにデバッグ用の項目追加。
	- リリースのときに消す
		- DEBUGビルドのときだけ追加されるようにした。
	- TestForm削除。


- progress.md更新


- MainDialogのイベント、少し整理。


- NotifyObject、修正。
	- DependOn削除。
	- 大幅に簡略化
- ObserverObject追加。
- この通知モデルを用いてGlobalConfig書き直す。
	- MainDialog書き直した。
- ImageManager、盤の読み込みと駒の読み込みを分離。
- ImageManagerConfig削除


- メニューに盤面画像の選択と駒画像の選択部を追加。イベントハンドラも追加。


- ImageConverterで駒ごとの位置微調整を行うコード追加。


- Menuを追加したときのダイアログ高さの計算コード追加。


- 駒画像のコンバーター、後手の角と飛車の位置が入れ替わっていたの修正。


- App/GlobalConfig.cs追加。起動時にglobal_config.xmlを読み込み、アプリ終了時に書き出すコード追加。


- MainDialogに素材選択のメニュー追加。
	少しだけコード書いた。あとでよく考える。


- Positionの盤面に従い、MainDialogの盤上の升に駒を描画するコード追加。手駒はまだ。


- MainDialogにやねうら王のアイコン設定


- 実行ファイルの配置してあるフォルダに
	YaneuraOuGUI2018.txt
	というファイルが存在すると、商用版の「やねうら王」用のモードに切り替わるように。


- MainDialogにスクリーンサイズにfitするようなウィンドウサイズを決定するコードを追加。


- 駒の画像用意。
	- ImageManagerに駒画像から駒を一纏めにするConvert()追加。
	- 駒素材、用意できた。


- 盤面の表示
	- とりあえず、PictureBoxにdpi無視で表示は出来るようになった。
	- MainDialogに、ウィンドゥのサイズを自動調整するコードを書いた。



■  2018/05/27


- Model/Resource/追加
	- ImageLoader.cs追加。
	- ImageManager.cs追加。
	- ImageManagerConfig.cs追加。
	- 盤面と駒の読み込み部分、とりあえず書いた。

- readme.mdの予定として感想戦、指定局面からの連続自己対局などを追加。

- NotifyObject、方針が決まった。(あとで作る)


■  2018/05/25


- NotifyObject作りかけ。(あとで消すかも)


- KifuMoveからcomment削除
- KifuCommentをKifuLogにrename
- KifuNodeにcomment追加。


- KifuMoveにコメント欄、着手時刻、思考ログのpropertyを用意。
	- KifuCommentクラスから派生させることにした。
- Model/Shogi/Kifu/KifuComment.cs追加。
- KifuTreeにrootComment追加。


■  2018/05/24


- readme.mdの将来的な予定に「即席詰将棋機能、中盤終盤課題局面生成機能」の追加


-  Parse CSA/KIF pos/move, Export CSA/KIF fix (Mizarさん)
-  Convert CSA/KIF test (Mizarさん)


- ViewModelからViewへのNotifyの仕組み考える。
- Model/ObjectModel/フォルダ追加
	- NotifyObject.cs追加
	- 作成中

- 画面素材など動的に読み込むなら、リソースを管理するリソースマネージャーみたいなのが必要なのでは…。
	- それはViewが持つことになるのか？本当にその設計は正しいのだろうか…。
	- ResourceManager.cs、一体どこに置けばいいのか…。

- Controller/ フォルダ追加
	- この設計が適切であるかどうか考え中。
- 対局を管理するクラス GameController.cs追加

- MainDialog <-> MainDialogViewModelを1:Nにするか考え中。

            // 1画面に盤面が複数表示できたほうが良いので(2画面、4画面、16画面、あるいは選択、みたいな)
            // mainDialogViewModelのインスタンス自体は1つではなくN個用意して、そのなかから1つ、もしくは2,4,16個を
            // 切り替えて表示できるようにしたほうがいいような気がする。            
            // mainDialog.bind(mainDialogViewModel);

	- MainDialogとMainDialogViewModelは 1:1にしておき、MainDialogViewModelのなかに1:Nでさらに対局関連の情報をもたせるべきでは..



- KifuManager.Bind(Position)追加
	- KifuTree.Bind(Position)追加
	- KifuTreeがPositionのインスタンスを生成するのおかしいので、Bind()して使うように変更する。
- 描画に関して、MVVM with Controlみたいな設計にすることに決定。
- Form1をTestForm1とrename
- View/Win2D/MainDialog追加
- ViewModel/MainDialogViewModel.cs追加
- App/TheApp.cs追加


- KifuTreeからToUsiPositionString()削除。
	- これ、あとでよく考える。


- ViewModeフォルダ追加
- Appフォルダ追加
	- Program.csをApp/に移動
- Form1をView/TestFormに移動



■  2018/05/23


- KifuManagerにそこまでのUSIの"position"コマンドで用いる局面図を保持しておく機能を追加。
	- ToUsiPosition()
	- この設計、良くないかも。あとでよく考える。
- KifuManagerからKifuTreeに、rootBoardTypeとrootSfenを移動させた。


■  2018/05/22


- readme.mdに本GUIの特徴などを追加


- readme.md リンクが一箇所前のままだったの修正。
	- 対応エンジンなどについて追記


- Positionクラスに、盤面配列と手駒などを渡してsfen文字列を構築するメソッド追加
	- // 盤面と手駒、手番を与えて、そのsfenを返す。
    -  public string SfenFromRawdata(Piece[/*81*/] board, Hand[/*2*/] hands, Color turn, int gamePly)
	- やねうら王から移植
	- テスト書いた。うまく動いてそう。


- KifuManager
	- KifuManagerのCSA形式の読み込みのサポート
	- KifuManager.FromCsaString()作業開始
- Position.gamePly、自動プロパティに変更。
- Position.lastPieceNo、getはpublicに変更。


- readme.mdに形勢グラフの件、追記
- docs/progress.md追加
- docs/ を MyShogi/docs/に移動


- KifuTreeのply削除。
	- Position.GamePly追加
- KifuFileTypeにPSN2追加。
- KifuManagerでPSN2フォーマットの読み書きに対応
- KifuManagerでPSNフォーマットの"Timeup"に対応


- PSN2 formatを策定


- readme.mdに商用版について紹介文追加


- KifuTreeにply追加。
- KifuManager
	- PSN形式の書き出しに対応
	- 分岐棋譜に対応
	- 持将棋、詰み、中断、千日手の棋譜に対して簡単な棋譜を読み込んで書き出すテスト完了
- Position.IsCapture(Move)追加。


- KifuManager
	- PSN形式の読み込み、コメントブロック、空行のスキップ処理
	- PSN形式の読み込み、分岐棋譜のサポート


- readme.md更新
	- 商用版で実装する予定のこと書いた


- Positionに入玉判定のmethod追加。DeclarationWin()
- EnteringKingRule.cs追加
- Position.Piece(Color,Piece,...)追加


■  2018/05/21


- KifuManagerのPSN形式サポート
	- 読み込み部、詰みの局面に対応。
	- PSN形式のヘッダ部の解釈、きちんとやることにした。
- Position.IsMated()追加
- PSNフォーマットのサイトを見ると千日手とか宣言勝ちについて規定がない。どう見ても欠陥フォーマットである。
	 http://genedavis.com/articles/2014/05/09/psn/
	- 将棋所の出力するPSN形式が読めればいいや…。
	- 詰み、持将棋、中断の解釈に対応。
	- 分岐棋譜、意外と大変…。対応するか考え中。


- KifuManagerのPSN形式サポート
	- 局面図の読み込み実装
	- 千日手勝ちの局面を正しく読み込めた
	- 勝ちの局面とかはまだ。あとで実装する。書き出しもまだ。あとで。
- Position.IsRepetition()で千日手が5度目の同一局面になっていたのを4度目に修正。


- Moveに、特殊な意味の定数を各種追加。千日手、中断など。
- MoveExtensionsにIsSpecial()追加
- KifuMove.nextMoveに非合法を追加した
- KifuManagerのPSN形式のサポート
	- KifuManager.FromString()にPSN形式の読み込み実装開始
	- これ、千日手負けも単に「Sennichite」としか文字列として書き出していないんだな。
	- チェスから来たからこうなっているのか…欠陥プロトコルだな。
	- 対局者名の読み込み部分まで書けた。
- TestクラスをDevTest1にリネーム
	- Mizarさん用のテストをDevTest2に移動


- Readme.mdに多言語対応、flodgate、通信対局の件、追加。


■  2018/05/20


- KifuManagerのKIF/KI2/CSA/PSN/SFENファイルの読み書きのサポート作業
	- 対応フォーマットにPSN追加
	- KifuTree.RoundTime()追加 , KifuMoveからは削除
	- KifuTree.TotalConsumptionTime()追加
	- KifuTree.Add()にtotalTimeの引数追加。
	- KifuManagerのLoad/Save()やめて、ToString,FromString()に変更。
	- KifuTree.Init()追加
	- KifuManger.FromSfenString()追加
	- KifuTree.RewindToRoot(),FastForward()追加
	- KifuManager , SFENの読み書き、動作確認完了
- BoardTypeにOthers追加
- Mizarさん用のテストコードをTest.Test4()に移動。


- USI2.0.md追加 , readme.mdに追記


- readme.mdに実装予定の内容を追記。



■  2018/05/19


- Mizarさんのプルリクをマージ
	- Shogi.Converter: add export CSA, fix export KIF/KI2
	- Conv to CSA/KIF/KI2 test


■  2018/05/18


- KifuMoveに考慮時間、TimeSpan追加する。
- KifuTreeにAdd(),Remove()追加。


- KifuTree.cs作成
- KifuNode.cs作成
- KifuMove.cs作成
- KifuTreeにDoMove(),UndoMove()実装
	- もう少し色々メソッドを生やせば使えるようになりそう。


- Position.UndoMove()で戻したときの駒落ちのときのhash keyおかしい。あとで原因調べる。
	- UndoMove()でkingSquare更新していたの削除
	- Position.SetState(StateInfo)復活
	- 以前のバージョンとkeyが一致した
- Position.UndoMove()でcaptureとdrop、promoteがきちんとundoされるかを調べる
	- ちゃんとundoされてた。


- PlayerManagerをKifuManagerにリネーム
- Model/Shogi/IO/ を Model/Shogi/Kifu/ にリネーム
- Model/Shogi/Kifu/のなかに
	- KifuFileType.cs
	- KifuManager.cs
	- KifuMove.cs
	を追加


- Model/Shogi/Converter/Kif.cs実装 (Mizarさん) #1



■  2018/05/17


- Bitboard.IsOne()追加


- Position::UndoMove()の実装
- StateInfo.capturedPiece追加
- PieceNo.ZEROをNONEに修正。


- readme.mdに実装予定の機能を追記
- Position.IsRepetition()をpublicに変更
	- Position.IsRepetition()のテスト完了
		- 千日手、引き分け
		- 連続王手の千日手


- Position::千日手判定の実装。
	- 連続王手千日手を非合法手にしないと…。
	- 王手の指し手とか、指してから「王手を回避していません」と表示されないと、「なんで駒つかめないの？」とかなりそう…。
	- Positionのなかでやるべきではないな。Positionでは千日手のチェックだけ出来ればいいや。
- RepetitionState.cs追加
- HASH_KEYにoperator == と !=を追加
	- HASH_KEYをHashKey.csに分離
- 千日手実装できた。テストはまだ。


- StateInfo.Keyをkeyにリネーム。
- StateInfo.lastMove追加。
	- この変数にPosition.DoMove()で反映するようにした。
	- 初期化するコードも追加。
- StateInfo.continuousCheck[]をDoMove()で更新するようにした。
- StateInfo.checkersBBをDoMove()で更新するようにした。
	- SetSfen()でも更新されるようにした。
	- やねうら王のほう、Position::Set()でcontinuousCheck更新してなくて、
		初期局面で王手がかかっていると連続王手の千日手判定に間違うような気がしてきた。まあそんな局面を開始局面として与えないのでいいや…。
	


■  2018/05/16


- docs/解説.txt 追加
- Positionに駒落ちかそうでないかを表現するフラグが必要
	- そもそも棋譜の管理クラスが必要
	- Model/Shogi/IO/追加
		- PlayManager.cs追加
		    /// 1局の対局棋譜を全般的に管理するクラス
			/// ・分岐棋譜をサポート
			/// ・着手時間をサポート
			/// ・対局相手の名前をサポート
			/// ・CSA/KIF/KI2/PSN形式での入出力をサポート
			/// ・千日手の管理、検出をサポート
		- となる予定..(あとで考える)


- PositionにToCsa()なども必要。同じくスタブだけ用意するか。


- PositionにToKif()などが必要
	- Positionに生やすとソースコードがくちゃくちゃになるな…
	- Model/Converter/Kif.csとかに書くか..
		- とりま、スタブだけ用意した。
		- Kif.cs
			- string ToKif(this Position pos)
			- string ToKif(this Position pos , Move move)


- MoveGenのテスト通った
	 - プロ棋譜 3万局に対して生成された合法手しか指されていないことは確認した
	 - MoveGenで生成された指し手に無駄な指し手が生成されていないことは確かめていないが


- 指し手生成書く(指し手生成、legalの判定があれば不要ではあるが…。駒の動かせる場所のガイドを表示したいので作っておく)
- MoveGen.cs追加
- Position.SideToMove()追加
- MoveGen、一応書けた。
	- テストがうまく通らん。あとでデバッグする。


- Model.Shogiをcore/ (Model.Shogi.Core)に移動
- Test.csをtest/ (Model/Test) に移動


■  2018/05/15


- Sfenの読み込みテスト 3万局。
	- すべてIsLegal()をパスするかのテスト
	- perftしたほうがいいかも知れん..
	- とりま、"records20151115.sfen"を読み込むテスト
	- Test.Test2()を追加。
	- "records20151115.sfen"のすべての指し手、IsLegal()でtrueであった。
	- Position.UsiPositionCmd()うまく動いてるっぽい。
- Position.UsiPositionCmd()で、非合法手が混じっていたときに、何手目が非合法であるかを例外のメッセージとして入れることに。
- Position.DoMove()でgamePly++するようにした。
- Position.IsLegal()で歩の移動のときにIsLegalDrop()呼び出していたの修正。
- Position.DoMove()で駒を取ったときにRemovePiece()していなかったの修正。


- 王手回避手になっているかをIsLegal()でチェックするように
	- 駒打ち、駒の移動に関してIsLegal実装完了
- Direct.Util.IsAligned()追加
- Position.SetState()削除


- Bitboard.Not()削除
- Position.Legal()に玉の移動による自殺チェック追加


- Position.LegalPawnDrop()のコード実装。
- Position.LegalDrop()追加。
- Position.IsLegal()で打ち歩、二歩の判定追加。
- Bitboard operator == と != 追加
- UInt128にoperator == と != 追加
- Bitboard.Not()追加。
- Bitboard.GetHashCode(),GetHashCode.Equals()追加。


- Position.UpdateBitboard()追加。
- Position.Pieces(...)いろいろ追加。
- Position.DoMove()でCheckers等の更新。
- Position.SliderBlockers()実装
- Bitboard.LineBB()追加
	- テーブルの初期化追加
- enumにextension methodでToInt()生やすの今ひとつな気がしてきた…まあいいか…。


- Position.AttackersTo()一式追加
- Position.AttackersToPawn()追加。
- Position.Pieces(Color c, Piece pr)追加
- Position.Checkers()実装
- StateInfo.blockersForKing[]追加
- StateInfo.checkSquares[]追加
- StateInfo.pinnersForKing[]追加


■　2018/05/14


- Bitboard.MoreThanOne()追加。
- Bitboard.BetweenBB()追加。
	- 初期化コードをBitboard.Init()に追加
	- Between()うまく動いた
- Direct.cs追加
	- Directions enum追加
	- Direct enum追加
	- directions_of()追加


- Positionの駒に駒番号振る
	- 駒台の駒も一意に定まらなければならないので、BonaPieceのような番号が必要なのでは…。
	- PieceNo.cs追加
- SetSfen() , DoMove()でPieceNoが反映されるようにする。
- Position.PrettyPieceNo()追加
	- うまく動いているようだ…。

- Bitboard::EffectsFrom()追加
	- うまく動いた
- PieceにB_PAWN～W_QUEEN追加。
- Bitboard.EnemyField()追加。
- "case Piece Knight":となっていたの修正。
	これPiece型のKnightという変数名の変数を宣言していることになるのか…。caseのなかで変数宣言してコンパイル通るの怖すぎワロタ。
- Position::Legal() 7割ぐらい書けた


■　2018/05/13


- Position::Legal()追加準備
	- Position::InCheck()用意 , 実装まだ
	- Position::LegalPawnDrop()用意 , 実装まだ
- Positionにoccupied bitboard追加
	- Position::Pieces() , Pieces(Color) , Empties() 追加。
	- Position::Pieces()に現在の局面が反映するようにした。
- PieceにPIECE_BB_NBなど定数を追加。



- Bitboard.KingEffect()追加。
- Color.Not()追加。
- Bitboardに近接駒の利きを返すmethods追加
	- Bitboard.PawnEffect() , KnightEffect() , SilverEffect() , GoldEffect() , KingEffect()
- Bitboard.HorseEffect()追加。
	- うまく動いた
- Bitboard.DragonEffect()追加。
	- うまく動いた


- BishipEffect()うまく動いた
- Bitboard.RookEffect()追加。
- Bitboardにoperator << , >> 追加。
	- UInt128にoperator << , >> 追加。
- Bitboard.RookStepEffect()実装。
- Bitboard.LanceEffect(),LanceStepEffect()実装。
	- ForwardRanks()実装。
	- うまく動いた。


- Bitboard.init()に角の利きのテーブルを初期化するコード実装
- Bitboard.PopCount()追加。
	- BitOp.PopCount()追加。
	- 動作テストした。うまく動いてるっぽい。
- BitOp.PEXT64()追加
- Bitboard.BishopEffect()追加。
	- Bitboard.BishopStepEffect()追加。
	- BishopEffect()おかしいのでテーブル初期化コードなどを見直し中。



■　2018/05/12


- SquareWithWall.cs追加
	- テーブル初期化部をBitboard.init()に追加。
- Bitboard &(Bitboard , Square)みたいなの一式追加。
- Bitboard.init()だけでゲロ吐きそう…。角の利きの初期化前まで書いた。


- 各駒の利きをBitboardで返すメソッド追加
	- Bitboard.PawnStepEffect(),LanceStepEffect(),SilverStepEffect()等、順番に追加
		- この初期化のために飛び利きの処理が必要なのか…。
- Bitboard.Pop()実装
- BitOp.cs追加
	- LSB64()を自前で用意。
- Bitboard.Zero(),NotZero()をIsZero(),IsNotZero()とリネーム。
- 長い利きの初期化ルーチン、やねうら王から移植してくる。(1/5ぐらい完了)
	- SquareWithWallが必要になる。これも移植してくるか…。


- Bitboardをやねうら王から移植
	- Bitboard(Square)を用意
	- IninitalizerでBitboardテーブルの初期化を呼び出すようにした。
- Bitboard.Pretty()を実装
- FILE_BB , RANK_BBテーブルの初期化コード追加。
	- Bitboard.FileBB() , RankBB() , SquareBB()追加。


- UInt128.cs追加
	- UInt128を用いてHASH_KEYを再実装
- Bitboard.cs追加
	- UInt128を用いて実装 and/or/xorをとりあず用意


■　2018/05/11


- USIの"position"を解釈するコード書く。
	- UsiPositionCmd()
	- "position startpos moves 7g7f 3c3d 8h3c+"
		- やねうら王のhash keyと一致した。
	- "position sfen lnsgkgsnl/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w - 1 moves 5a6b 7g7f 3a3b"
		- やねうら王のhash keyと一致した。


- Position::SetSfen()とDoMove()にHashが反映するようにした
- Position::DoMoveでPromote考慮していなかったの修正。
- Zobristの配列に直接アクセスしないように変更。


- Position.Keyは128bit型にしておく。
- Position::set_state()をやねうら王から移植
- Position::ZobristHashの値をやねうら王に合うように実装
- Position.SetSfen()のあとKey()がやねうら王のそれと同じ値になるところまで確認
- Position.ToUsi()、sfenなのか、そこまでの手順を含むのかよくわからなくて良くないな…。
	- Position.ToSfen()にリネームする。


- stringの直接的な連結、なるべく避けてString.Format()を使うようにする
- Misc.cs追加
	- PRNG追加
- Position.csにStateInfo追加
- StateInfoにHash実装
	

■　2018/05/10


- Model/BoardType.cs追加
	- LabelDescriptionのAttributeが必要。あとで考える
	- Utilに用意するか…。
	- reflection使ってattribute取得するコード、移植性に不安があるのでこれ使わないことにする。
- Position.init()をBoardTypeを指定できるようにした。二枚落ちなども指定できる。
	- 名前、InitBoard()にリネーム


- Model/Shogi/Test.cs追加
	- テスト用のコードはこちらに移動
	- UnitTestきちんと書くべきかもしれないが、やねうら王からの移植なので書くほどでもない。
- Positionクラス、参照透明にすべきか…。DoMoveで参照透明になるほうも用意したほうがいいような…。
	- あとで考える。
- Positionにref Hand Hand(Color)追加。
	- Position.PieceOn(Square)もrefを返すように変更。
	- kingSquareのrefを返すKingSquare(Color)も用意
- Position.PutPiece , RemovePieceでKingSquareを更新するようにした。
- iteration変数にrefつけるのC#7.3以降の機能だと…。ターゲットC#7.3に変更する。
	- しかし、これ思ってる機能ではないようであった…。


- Position::DoMove()実装
	- これを実装するのにLegal()を実装する必要がある。
	- そのためにさらにBitboardや利きなど一連の処理が必要。
	- とりあえずLegal()判定なしにDoMove()だけ実装する。
	- 76歩でDoMove()出来るところまでは確認出来た。
- Position.PutPiece()追加
- Flip(this Color)をFlip(ref this Color)に変更。
- Position::Pretty()追加


- Util.FromUsiMove()追加
- SfenExceptionのコンストラクタ追加
- Util.FromUsiMove()追加
	- 関連するUtil.FromUsiSquare()など追加
	- Util.FromUsiFile()
	- Util.FromUsiRank()
- Util.Pretty2(this Move)用意

- 指し手生成を書かないといけないのか…
	- これ、Search()関数を書けばC#版のやねうら王が完成するのでは…。しんどすぎ


- Position::ToUsi() , SetSfen()追加
	- Position::SetSfen()で平手の初期局面をセットして、ToUsi()でUSI文字列になることを確認した。
- Exception.cs追加。
	- SfenException追加
- Util::FromUSI()追加
- ToUSI()をToUsi()とリネーム。
- ToInt()の型、UInt32ではなくInt32に変更する。
- Model/Shogi/SfenUtil.cs削除


■　2018/05/09


- 盤面を表現するPosition.csを追加
	- とりあえず構造体だけ用意
	- Bitboardも必要なのでは…
- 間違えてPieceExtensionsにColorのFlip()を入れていたの削除


- 手駒を表現する Hand.cs追加
	- extension methodでrefを使いたい。これはC# 7.2の機能らしく、buildをC# 7.2に変更。
		- cf. C# 7.2へ言語バージョンを変更したい!!! http://it-mio.com/?p=163
	- HandのToUSI()まで実装完了


- 指し手を表現する Move.cs追加
- Model.Shogi.Utilクラスをpartialに変更。それぞれのファイルに個別に書く。
	- Util.cs削除
- 各クラスのToInt()はUInt32で統一する。


- File,RankなどにIsOk() , ToInt() , Pretty() , ToUSI()を実装する。
- Model.Shogi
	- Util.cs追加。
		- CanPromote()など追加
	- Square.cs追加
		- やねうら王を元に実装
- Rank,FileのPretty()修正。


■　2018/05/08


- Pieceまわり、extension methodで書き直す。
- Color.csを用意。
- Piece.csを用意。
	- なるべく、やねうら王に合わせる。
- Rank.cs追加
- File.cs追加
- Pretty()で日本語文字列として表示できるようにしておく。
- IsOk()で正常な範囲にあるかを判定できるようにしておく。


- Model/Network , Model/TimeMan , Model/Shogi フォルダ追加
- Model/Shogi/sfen フォルダ追加
- Model/Shogi/ShogiType.cs追加
	- ここに、駒・手番・盤面の型定義を行う。
- Model/Shogi/sfen/SfenUtil.cs追加
	- この設計が良いのかどうかについて考え中。


■　2018/05/07


- 製作開始
	- Visual Studio 2017でビルドが出来るようにする
	- C#で開発していく
	- WhaleWatcherのソースコードを参考に作っていく
		- 作者のえびふらいさんとライセンス契約
		- cf. https://github.com/ebifrier/Ragnarok
	- 素材はマイナビさんに用意してもらう

- Model/View/Utilフォルダを用意。
- CsaConnectData.cs追加。
- ざざっとModelを書いていく。Viewは後回し。
