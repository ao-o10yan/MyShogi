
- ToDo
	- 指し手生成書く(指し手生成、legalの判定があれば不要ではあるが…。駒の動かせる場所のガイドを表示したいので作っておく)
	- Position::legal() , undo_move() , Sfen読み込みきちんと書く
	- Position::千日手実装。
	- Positionに駒落ちかそうでないかを表現するフラグが必要


■　2018/05/12


- SquareWithWall.cs追加
	- テーブル初期化部をBitboard.init()に追加。
- Bitboard &(Bitboard , Square)みたいなの一式追加。
- Bitboard.init()だけでゲロ吐きそう…。角の利きの初期化前まで書いた。


- 各駒の利きをBitboardで返すメソッド追加
	- Bitboard.PawnStepEffect(),LanceStepEffect(),SilverStepEffect()等、順番に追加
		- この初期化のために飛び利きの処理が必要なのか…。
- Bitboard.Pop()実装
- BitOp.cs追加
	- LSB64()を自前で用意。
- Bitboard.Zero(),NotZero()をIsZero(),IsNotZero()とリネーム。
- 長い利きの初期化ルーチン、やねうら王から移植してくる。(1/5ぐらい完了)
	- SquareWithWallが必要になる。これも移植してくるか…。


- Bitboardをやねうら王から移植
	- Bitboard(Square)を用意
	- IninitalizerでBitboardテーブルの初期化を呼び出すようにした。
- Bitboard.Pretty()を実装
- FILE_BB , RANK_BBテーブルの初期化コード追加。
	- Bitboard.FileBB() , RankBB() , SquareBB()追加。


- UInt128.cs追加
	- UInt128を用いてHASH_KEYを再実装
- Bitboard.cs追加
	- UInt128を用いて実装 and/or/xorをとりあず用意


■　2018/05/11


- USIの"position"を解釈するコード書く。
	- UsiPositionCmd()
	- "position startpos moves 7g7f 3c3d 8h3c+"
		- やねうら王のhash keyと一致した。
	- "position sfen lnsgkgsnl/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w - 1 moves 5a6b 7g7f 3a3b"
		- やねうら王のhash keyと一致した。


- Position::SetSfen()とDoMove()にHashが反映するようにした
- Position::DoMoveでPromote考慮していなかったの修正。
- Zobristの配列に直接アクセスしないように変更。


- Position.Keyは128bit型にしておく。
- Position::set_state()をやねうら王から移植
- Position::ZobristHashの値をやねうら王に合うように実装
- Position.SetSfen()のあとKey()がやねうら王のそれと同じ値になるところまで確認
- Position.ToUsi()、sfenなのか、そこまでの手順を含むのかよくわからなくて良くないな…。
	- Position.ToSfen()にリネームする。


- stringの直接的な連結、なるべく避けてString.Format()を使うようにする
- Misc.cs追加
	- PRNG追加
- Position.csにStateInfo追加
- StateInfoにHash実装
	

■　2018/05/10


- Model/BoardType.cs追加
	- LabelDescriptionのAttributeが必要。あとで考える
	- Utilに用意するか…。
	- reflection使ってattribute取得するコード、移植性に不安があるのでこれ使わないことにする。
- Position.init()をBoardTypeを指定できるようにした。二枚落ちなども指定できる。
	- 名前、InitBoard()にリネーム


- Model/Shogi/Test.cs追加
	- テスト用のコードはこちらに移動
	- UnitTestきちんと書くべきかもしれないが、やねうら王からの移植なので書くほどでもない。
- Positionクラス、参照透明にすべきか…。DoMoveで参照透明になるほうも用意したほうがいいような…。
	- あとで考える。
- Positionにref Hand Hand(Color)追加。
	- Position.PieceOn(Square)もrefを返すように変更。
	- kingSquareのrefを返すKingSquare(Color)も用意
- Position.PutPiece , RemovePieceでKingSquareを更新するようにした。
- iteration変数にrefつけるのC#7.3以降の機能だと…。ターゲットC#7.3に変更する。
	- しかし、これ思ってる機能ではないようであった…。


- Position::DoMove()実装
	- これを実装するのにLegal()を実装する必要がある。
	- そのためにさらにBitboardや利きなど一連の処理が必要。
	- とりあえずLegal()判定なしにDoMove()だけ実装する。
	- 76歩でDoMove()出来るところまでは確認出来た。
- Position.PutPiece()追加
- Flip(this Color)をFlip(ref this Color)に変更。
- Position::Pretty()追加


- Util.FromUsiMove()追加
- SfenExceptionのコンストラクタ追加
- Util.FromUsiMove()追加
	- 関連するUtil.FromUsiSquare()など追加
	- Util.FromUsiFile()
	- Util.FromUsiRank()
- Util.Pretty2(this Move)用意

- 指し手生成を書かないといけないのか…
	- これ、Search()関数を書けばC#版のやねうら王が完成するのでは…。しんどすぎ


- Position::ToUsi() , SetSfen()追加
	- Position::SetSfen()で平手の初期局面をセットして、ToUsi()でUSI文字列になることを確認した。
- Exception.cs追加。
	- SfenException追加
- Util::FromUSI()追加
- ToUSI()をToUsi()とリネーム。
- ToInt()の型、UInt32ではなくInt32に変更する。
- Model/Shogi/SfenUtil.cs削除


■　2018/05/09


- 盤面を表現するPosition.csを追加
	- とりあえず構造体だけ用意
	- Bitboardも必要なのでは…
- 間違えてPieceExtensionsにColorのFlip()を入れていたの削除


- 手駒を表現する Hand.cs追加
	- extension methodでrefを使いたい。これはC# 7.2の機能らしく、buildをC# 7.2に変更。
		- cf. C# 7.2へ言語バージョンを変更したい!!! http://it-mio.com/?p=163
	- HandのToUSI()まで実装完了


- 指し手を表現する Move.cs追加
- Model.Shogi.Utilクラスをpartialに変更。それぞれのファイルに個別に書く。
	- Util.cs削除
- 各クラスのToInt()はUInt32で統一する。


- File,RankなどにIsOk() , ToInt() , Pretty() , ToUSI()を実装する。
- Model.Shogi
	- Util.cs追加。
		- CanPromote()など追加
	- Square.cs追加
		- やねうら王を元に実装
- Rank,FileのPretty()修正。


■　2018/05/08


- Pieceまわり、extension methodで書き直す。
- Color.csを用意。
- Piece.csを用意。
	- なるべく、やねうら王に合わせる。
- Rank.cs追加
- File.cs追加
- Pretty()で日本語文字列として表示できるようにしておく。
- IsOk()で正常な範囲にあるかを判定できるようにしておく。


- Model/Network , Model/TimeMan , Model/Shogi フォルダ追加
- Model/Shogi/sfen フォルダ追加
- Model/Shogi/ShogiType.cs追加
	- ここに、駒・手番・盤面の型定義を行う。
- Model/Shogi/sfen/SfenUtil.cs追加
	- この設計が良いのかどうかについて考え中。


■　2018/05/07


- 製作開始
	- Visual Studio 2017でビルドが出来るようにする
	- C#で開発していく
	- WhaleWatcherのソースコードを参考に作っていく
		- 作者のえびふらいさんとライセンス契約
		- cf. https://github.com/ebifrier/Ragnarok
	- 素材はマイナビさんに用意してもらう

- Model/View/Utilフォルダを用意。
- CsaConnectData.cs追加。
- ざざっとModelを書いていく。Viewは後回し。
