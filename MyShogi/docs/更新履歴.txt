
ToDo
- Positionに入玉判定のmethod追加。
- KifuManager
	- KifuManagerのCSA形式のサポート
	- KifuManagerのKIF形式のサポート
	- KifuManagerのKI2形式のサポート



■  2018/05/21


- KifuManagerのPSN形式サポート
	- 読み込み部、詰みの局面に対応。
	- PSN形式のヘッダ部の解釈、きちんとやることにした。
- Position.IsMated()追加
- PSNフォーマットのサイトを見ると千日手とか宣言勝ちについて規定がない。どう見ても欠陥フォーマットである。
	 http://genedavis.com/articles/2014/05/09/psn/
	- 将棋所の出力するPSN形式が読めればいいや…。
	- 詰み、持将棋、中断の解釈に対応。
	- 分岐棋譜、意外と大変…。対応するか考え中。


- KifuManagerのPSN形式サポート
	- 局面図の読み込み実装
	- 千日手勝ちの局面を正しく読み込めた
	- 勝ちの局面とかはまだ。あとで実装する。書き出しもまだ。あとで。
- Position.IsRepetition()で千日手が5度目の同一局面になっていたのを4度目に修正。


- Moveに、特殊な意味の定数を各種追加。千日手、中断など。
- MoveExtensionsにIsSpecial()追加
- KifuMove.nextMoveに非合法を追加した
- KifuManagerのPSN形式のサポート
	- KifuManager.FromString()にPSN形式の読み込み実装開始
	- これ、千日手負けも単に「Sennichite」としか文字列として書き出していないんだな。
	- チェスから来たからこうなっているのか…欠陥プロトコルだな。
	- 対局者名の読み込み部分まで書けた。
- TestクラスをDevTest1にリネーム
	- Mizarさん用のテストをDevTest2に移動


- Readme.mdに多言語対応、flodgate、通信対局の件、追加。


■  2018/05/20


- KifuManagerのKIF/KI2/CSA/PSN/SFENファイルの読み書きのサポート作業
	- 対応フォーマットにPSN追加
	- KifuTree.RoundTime()追加 , KifuMoveからは削除
	- KifuTree.TotalConsumptionTime()追加
	- KifuTree.Add()にtotalTimeの引数追加。
	- KifuManagerのLoad/Save()やめて、ToString,FromString()に変更。
	- KifuTree.Init()追加
	- KifuManger.FromSfenString()追加
	- KifuTree.RewindToRoot(),FastForward()追加
	- KifuManager , SFENの読み書き、動作確認完了
- BoardTypeにOthers追加
- Mizarさん用のテストコードをTest.Test4()に移動。


- USI2.0.md追加 , readme.mdに追記


- readme.mdに実装予定の内容を追記。



■  2018/05/19


- Mizarさんのプルリクをマージ
	- Shogi.Converter: add export CSA, fix export KIF/KI2
	- Conv to CSA/KIF/KI2 test


■  2018/05/18


- KifuMoveに考慮時間、TimeSpan追加する。
- KifuTreeにAdd(),Remove()追加。


- KifuTree.cs作成
- KifuNode.cs作成
- KifuMove.cs作成
- KifuTreeにDoMove(),UndoMove()実装
	- もう少し色々メソッドを生やせば使えるようになりそう。


- Position.UndoMove()で戻したときの駒落ちのときのhash keyおかしい。あとで原因調べる。
	- UndoMove()でkingSquare更新していたの削除
	- Position.SetState(StateInfo)復活
	- 以前のバージョンとkeyが一致した
- Position.UndoMove()でcaptureとdrop、promoteがきちんとundoされるかを調べる
	- ちゃんとundoされてた。


- PlayerManagerをKifuManagerにリネーム
- Model/Shogi/IO/ を Model/Shogi/Kifu/ にリネーム
- Model/Shogi/Kifu/のなかに
	- KifuFileType.cs
	- KifuManager.cs
	- KifuMove.cs
	を追加


- Model/Shogi/Converter/Kif.cs実装 (Mizarさん) #1



■  2018/05/17


- Bitboard.IsOne()追加


- Position::UndoMove()の実装
- StateInfo.capturedPiece追加
- PieceNo.ZEROをNONEに修正。


- readme.mdに実装予定の機能を追記
- Position.IsRepetition()をpublicに変更
	- Position.IsRepetition()のテスト完了
		- 千日手、引き分け
		- 連続王手の千日手


- Position::千日手判定の実装。
	- 連続王手千日手を非合法手にしないと…。
	- 王手の指し手とか、指してから「王手を回避していません」と表示されないと、「なんで駒つかめないの？」とかなりそう…。
	- Positionのなかでやるべきではないな。Positionでは千日手のチェックだけ出来ればいいや。
- RepetitionState.cs追加
- HASH_KEYにoperator == と !=を追加
	- HASH_KEYをHashKey.csに分離
- 千日手実装できた。テストはまだ。


- StateInfo.Keyをkeyにリネーム。
- StateInfo.lastMove追加。
	- この変数にPosition.DoMove()で反映するようにした。
	- 初期化するコードも追加。
- StateInfo.continuousCheck[]をDoMove()で更新するようにした。
- StateInfo.checkersBBをDoMove()で更新するようにした。
	- SetSfen()でも更新されるようにした。
	- やねうら王のほう、Position::Set()でcontinuousCheck更新してなくて、
		初期局面で王手がかかっていると連続王手の千日手判定に間違うような気がしてきた。まあそんな局面を開始局面として与えないのでいいや…。
	


■  2018/05/16


- docs/解説.txt 追加
- Positionに駒落ちかそうでないかを表現するフラグが必要
	- そもそも棋譜の管理クラスが必要
	- Model/Shogi/IO/追加
		- PlayManager.cs追加
		    /// 1局の対局棋譜を全般的に管理するクラス
			/// ・分岐棋譜をサポート
			/// ・着手時間をサポート
			/// ・対局相手の名前をサポート
			/// ・CSA/KIF/KI2/PSN形式での入出力をサポート
			/// ・千日手の管理、検出をサポート
		- となる予定..(あとで考える)


- PositionにToCsa()なども必要。同じくスタブだけ用意するか。


- PositionにToKif()などが必要
	- Positionに生やすとソースコードがくちゃくちゃになるな…
	- Model/Converter/Kif.csとかに書くか..
		- とりま、スタブだけ用意した。
		- Kif.cs
			- string ToKif(this Position pos)
			- string ToKif(this Position pos , Move move)


- MoveGenのテスト通った
	 - プロ棋譜 3万局に対して生成された合法手しか指されていないことは確認した
	 - MoveGenで生成された指し手に無駄な指し手が生成されていないことは確かめていないが


- 指し手生成書く(指し手生成、legalの判定があれば不要ではあるが…。駒の動かせる場所のガイドを表示したいので作っておく)
- MoveGen.cs追加
- Position.SideToMove()追加
- MoveGen、一応書けた。
	- テストがうまく通らん。あとでデバッグする。


- Model.Shogiをcore/ (Model.Shogi.Core)に移動
- Test.csをtest/ (Model/Test) に移動


■  2018/05/15


- Sfenの読み込みテスト 3万局。
	- すべてIsLegal()をパスするかのテスト
	- perftしたほうがいいかも知れん..
	- とりま、"records20151115.sfen"を読み込むテスト
	- Test.Test2()を追加。
	- "records20151115.sfen"のすべての指し手、IsLegal()でtrueであった。
	- Position.UsiPositionCmd()うまく動いてるっぽい。
- Position.UsiPositionCmd()で、非合法手が混じっていたときに、何手目が非合法であるかを例外のメッセージとして入れることに。
- Position.DoMove()でgamePly++するようにした。
- Position.IsLegal()で歩の移動のときにIsLegalDrop()呼び出していたの修正。
- Position.DoMove()で駒を取ったときにRemovePiece()していなかったの修正。


- 王手回避手になっているかをIsLegal()でチェックするように
	- 駒打ち、駒の移動に関してIsLegal実装完了
- Direct.Util.IsAligned()追加
- Position.SetState()削除


- Bitboard.Not()削除
- Position.Legal()に玉の移動による自殺チェック追加


- Position.LegalPawnDrop()のコード実装。
- Position.LegalDrop()追加。
- Position.IsLegal()で打ち歩、二歩の判定追加。
- Bitboard operator == と != 追加
- UInt128にoperator == と != 追加
- Bitboard.Not()追加。
- Bitboard.GetHashCode(),GetHashCode.Equals()追加。


- Position.UpdateBitboard()追加。
- Position.Pieces(...)いろいろ追加。
- Position.DoMove()でCheckers等の更新。
- Position.SliderBlockers()実装
- Bitboard.LineBB()追加
	- テーブルの初期化追加
- enumにextension methodでToInt()生やすの今ひとつな気がしてきた…まあいいか…。


- Position.AttackersTo()一式追加
- Position.AttackersToPawn()追加。
- Position.Pieces(Color c, Piece pr)追加
- Position.Checkers()実装
- StateInfo.blockersForKing[]追加
- StateInfo.checkSquares[]追加
- StateInfo.pinnersForKing[]追加


■　2018/05/14


- Bitboard.MoreThanOne()追加。
- Bitboard.BetweenBB()追加。
	- 初期化コードをBitboard.Init()に追加
	- Between()うまく動いた
- Direct.cs追加
	- Directions enum追加
	- Direct enum追加
	- directions_of()追加


- Positionの駒に駒番号振る
	- 駒台の駒も一意に定まらなければならないので、BonaPieceのような番号が必要なのでは…。
	- PieceNo.cs追加
- SetSfen() , DoMove()でPieceNoが反映されるようにする。
- Position.PrettyPieceNo()追加
	- うまく動いているようだ…。

- Bitboard::EffectsFrom()追加
	- うまく動いた
- PieceにB_PAWN～W_QUEEN追加。
- Bitboard.EnemyField()追加。
- "case Piece Knight":となっていたの修正。
	これPiece型のKnightという変数名の変数を宣言していることになるのか…。caseのなかで変数宣言してコンパイル通るの怖すぎワロタ。
- Position::Legal() 7割ぐらい書けた


■　2018/05/13


- Position::Legal()追加準備
	- Position::InCheck()用意 , 実装まだ
	- Position::LegalPawnDrop()用意 , 実装まだ
- Positionにoccupied bitboard追加
	- Position::Pieces() , Pieces(Color) , Empties() 追加。
	- Position::Pieces()に現在の局面が反映するようにした。
- PieceにPIECE_BB_NBなど定数を追加。



- Bitboard.KingEffect()追加。
- Color.Not()追加。
- Bitboardに近接駒の利きを返すmethods追加
	- Bitboard.PawnEffect() , KnightEffect() , SilverEffect() , GoldEffect() , KingEffect()
- Bitboard.HorseEffect()追加。
	- うまく動いた
- Bitboard.DragonEffect()追加。
	- うまく動いた


- BishipEffect()うまく動いた
- Bitboard.RookEffect()追加。
- Bitboardにoperator << , >> 追加。
	- UInt128にoperator << , >> 追加。
- Bitboard.RookStepEffect()実装。
- Bitboard.LanceEffect(),LanceStepEffect()実装。
	- ForwardRanks()実装。
	- うまく動いた。


- Bitboard.init()に角の利きのテーブルを初期化するコード実装
- Bitboard.PopCount()追加。
	- BitOp.PopCount()追加。
	- 動作テストした。うまく動いてるっぽい。
- BitOp.PEXT64()追加
- Bitboard.BishopEffect()追加。
	- Bitboard.BishopStepEffect()追加。
	- BishopEffect()おかしいのでテーブル初期化コードなどを見直し中。



■　2018/05/12


- SquareWithWall.cs追加
	- テーブル初期化部をBitboard.init()に追加。
- Bitboard &(Bitboard , Square)みたいなの一式追加。
- Bitboard.init()だけでゲロ吐きそう…。角の利きの初期化前まで書いた。


- 各駒の利きをBitboardで返すメソッド追加
	- Bitboard.PawnStepEffect(),LanceStepEffect(),SilverStepEffect()等、順番に追加
		- この初期化のために飛び利きの処理が必要なのか…。
- Bitboard.Pop()実装
- BitOp.cs追加
	- LSB64()を自前で用意。
- Bitboard.Zero(),NotZero()をIsZero(),IsNotZero()とリネーム。
- 長い利きの初期化ルーチン、やねうら王から移植してくる。(1/5ぐらい完了)
	- SquareWithWallが必要になる。これも移植してくるか…。


- Bitboardをやねうら王から移植
	- Bitboard(Square)を用意
	- IninitalizerでBitboardテーブルの初期化を呼び出すようにした。
- Bitboard.Pretty()を実装
- FILE_BB , RANK_BBテーブルの初期化コード追加。
	- Bitboard.FileBB() , RankBB() , SquareBB()追加。


- UInt128.cs追加
	- UInt128を用いてHASH_KEYを再実装
- Bitboard.cs追加
	- UInt128を用いて実装 and/or/xorをとりあず用意


■　2018/05/11


- USIの"position"を解釈するコード書く。
	- UsiPositionCmd()
	- "position startpos moves 7g7f 3c3d 8h3c+"
		- やねうら王のhash keyと一致した。
	- "position sfen lnsgkgsnl/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w - 1 moves 5a6b 7g7f 3a3b"
		- やねうら王のhash keyと一致した。


- Position::SetSfen()とDoMove()にHashが反映するようにした
- Position::DoMoveでPromote考慮していなかったの修正。
- Zobristの配列に直接アクセスしないように変更。


- Position.Keyは128bit型にしておく。
- Position::set_state()をやねうら王から移植
- Position::ZobristHashの値をやねうら王に合うように実装
- Position.SetSfen()のあとKey()がやねうら王のそれと同じ値になるところまで確認
- Position.ToUsi()、sfenなのか、そこまでの手順を含むのかよくわからなくて良くないな…。
	- Position.ToSfen()にリネームする。


- stringの直接的な連結、なるべく避けてString.Format()を使うようにする
- Misc.cs追加
	- PRNG追加
- Position.csにStateInfo追加
- StateInfoにHash実装
	

■　2018/05/10


- Model/BoardType.cs追加
	- LabelDescriptionのAttributeが必要。あとで考える
	- Utilに用意するか…。
	- reflection使ってattribute取得するコード、移植性に不安があるのでこれ使わないことにする。
- Position.init()をBoardTypeを指定できるようにした。二枚落ちなども指定できる。
	- 名前、InitBoard()にリネーム


- Model/Shogi/Test.cs追加
	- テスト用のコードはこちらに移動
	- UnitTestきちんと書くべきかもしれないが、やねうら王からの移植なので書くほどでもない。
- Positionクラス、参照透明にすべきか…。DoMoveで参照透明になるほうも用意したほうがいいような…。
	- あとで考える。
- Positionにref Hand Hand(Color)追加。
	- Position.PieceOn(Square)もrefを返すように変更。
	- kingSquareのrefを返すKingSquare(Color)も用意
- Position.PutPiece , RemovePieceでKingSquareを更新するようにした。
- iteration変数にrefつけるのC#7.3以降の機能だと…。ターゲットC#7.3に変更する。
	- しかし、これ思ってる機能ではないようであった…。


- Position::DoMove()実装
	- これを実装するのにLegal()を実装する必要がある。
	- そのためにさらにBitboardや利きなど一連の処理が必要。
	- とりあえずLegal()判定なしにDoMove()だけ実装する。
	- 76歩でDoMove()出来るところまでは確認出来た。
- Position.PutPiece()追加
- Flip(this Color)をFlip(ref this Color)に変更。
- Position::Pretty()追加


- Util.FromUsiMove()追加
- SfenExceptionのコンストラクタ追加
- Util.FromUsiMove()追加
	- 関連するUtil.FromUsiSquare()など追加
	- Util.FromUsiFile()
	- Util.FromUsiRank()
- Util.Pretty2(this Move)用意

- 指し手生成を書かないといけないのか…
	- これ、Search()関数を書けばC#版のやねうら王が完成するのでは…。しんどすぎ


- Position::ToUsi() , SetSfen()追加
	- Position::SetSfen()で平手の初期局面をセットして、ToUsi()でUSI文字列になることを確認した。
- Exception.cs追加。
	- SfenException追加
- Util::FromUSI()追加
- ToUSI()をToUsi()とリネーム。
- ToInt()の型、UInt32ではなくInt32に変更する。
- Model/Shogi/SfenUtil.cs削除


■　2018/05/09


- 盤面を表現するPosition.csを追加
	- とりあえず構造体だけ用意
	- Bitboardも必要なのでは…
- 間違えてPieceExtensionsにColorのFlip()を入れていたの削除


- 手駒を表現する Hand.cs追加
	- extension methodでrefを使いたい。これはC# 7.2の機能らしく、buildをC# 7.2に変更。
		- cf. C# 7.2へ言語バージョンを変更したい!!! http://it-mio.com/?p=163
	- HandのToUSI()まで実装完了


- 指し手を表現する Move.cs追加
- Model.Shogi.Utilクラスをpartialに変更。それぞれのファイルに個別に書く。
	- Util.cs削除
- 各クラスのToInt()はUInt32で統一する。


- File,RankなどにIsOk() , ToInt() , Pretty() , ToUSI()を実装する。
- Model.Shogi
	- Util.cs追加。
		- CanPromote()など追加
	- Square.cs追加
		- やねうら王を元に実装
- Rank,FileのPretty()修正。


■　2018/05/08


- Pieceまわり、extension methodで書き直す。
- Color.csを用意。
- Piece.csを用意。
	- なるべく、やねうら王に合わせる。
- Rank.cs追加
- File.cs追加
- Pretty()で日本語文字列として表示できるようにしておく。
- IsOk()で正常な範囲にあるかを判定できるようにしておく。


- Model/Network , Model/TimeMan , Model/Shogi フォルダ追加
- Model/Shogi/sfen フォルダ追加
- Model/Shogi/ShogiType.cs追加
	- ここに、駒・手番・盤面の型定義を行う。
- Model/Shogi/sfen/SfenUtil.cs追加
	- この設計が良いのかどうかについて考え中。


■　2018/05/07


- 製作開始
	- Visual Studio 2017でビルドが出来るようにする
	- C#で開発していく
	- WhaleWatcherのソースコードを参考に作っていく
		- 作者のえびふらいさんとライセンス契約
		- cf. https://github.com/ebifrier/Ragnarok
	- 素材はマイナビさんに用意してもらう

- Model/View/Utilフォルダを用意。
- CsaConnectData.cs追加。
- ざざっとModelを書いていく。Viewは後回し。
